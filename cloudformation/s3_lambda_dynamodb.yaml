AWSTemplateFormatVersion: 2010-09-09
Parameters:
  BucketName:
    Default: None
    Type: String
Conditions:
  CreateBucket: !Not 
    - !Equals 
      - !Ref BucketName
      - None
Resources:
  SNS:
    Type: "AWS::CloudFormation::Stack"
    DeletionPolicy: Retain
    Properties:
      TemplateURL: >-
        https://cf-templates-wnxns0c4jjl4-us-east-1.s3.amazonaws.com/2022147jpx-sns_topic.yaml
  SQS:
    Type: "AWS::CloudFormation::Stack"
    DeletionPolicy: Retain
    Properties:
      TemplateURL: >-
        https://cf-templates-wnxns0c4jjl4-us-east-1.s3.amazonaws.com/2022147rdO-sqs.yaml
  LambdaRole:
    Type: "AWS::CloudFormation::Stack"
    DeletionPolicy: Retain
    Properties:
      TemplateURL: >-
        https://cf-templates-wnxns0c4jjl4-us-east-1.s3.amazonaws.com/2022148kmD-Role_LambdaZip.yaml
  DDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: title
          AttributeType: S
        - AttributeName: year
          AttributeType: 'N'
      KeySchema:
        - AttributeName: year
          KeyType: HASH
        - AttributeName: title
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: "movies"
  S3fordynamo:
    Type: 'AWS::S3::Bucket'
    Condition: CreateBucket
    DeletionPolicy: Retain
  ddbinputtransform:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: "ddb_input_transform"
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Outputs.S3DynamoArn
      Architectures:
        - x86_64
      Runtime: python3.9
      Timeout: 40
      MemorySize: 1024
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            print('hello from lambda')
    DependsOn:
      - "S3fordynamo"
      - "DDBTable"
  batchwrites3dynamo:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: "batch_write_s3_dynamodb"
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Outputs.S3DynamoArn
      Architectures:
        - x86_64
      Runtime: python3.9
      Timeout: 300
      MemorySize: 1024
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            print('hello from lambda')
    DependsOn:
      - "DDBTable"
      - "S3fordynamo"
  SNSSubscriptionQueue:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !GetAtt SNS.Outputs.SNSETLArn
      Endpoint: !GetAtt SQS.Outputs.QueueARN
      Protocol: sqs
      RawMessageDelivery: 'true'
