Parameters:
  State:
    Default: "ENABLED"
    Description: Default State when EventBridge Rule is created
    Type: String
  CronScheduleOn:
    Default: "cron(00 17 * 5 ? 2022)"
    Description: s3 path to glue script
    Type: String
  CronScheduleOff:
    Default: "cron(00 19 * 5 ? 2022)"
    Description: s3 path to glue script
    Type: String
Resources:
  ScheduleResourceOn:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: ScheduleResourceOn
      Description: Schedules Turning ON RDS DB
      EventBusName: default
      State: !Ref State
      ScheduleExpression: !Ref CronScheduleOn
      Targets:
        - Arn: !GetAtt
            - LambdaRDSOnOff
            - Arn
          Id: 'LambdaRDSOn'
          RoleArn: !GetAtt
            - EventBridgeIAMrole
            - Arn
    DependsOn:
      - "LambdaRDSOnOff"
  ScheduleResourceOff:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: ScheduleResourceOff
      Description: Schedules Turning Off RDS DB
      EventBusName: default
      State: !Ref State
      ScheduleExpression: !Ref CronScheduleOff
      Targets:
        - Arn: >-
            arn:aws:events:us-east-1:123456789012:event-bus/CrossRegionDestinationBus
          Id: 'LambdaRDSOff'
          RoleArn: !GetAtt
            - EventBridgeIAMrole
            - Arn
    DependsOn:
      - "LambdaRDSOnOff"
  LambdaRDSOnOff:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: "rds_on_off"
      Handler: index.lambda_handler
      Role:
        Fn::ImportValue: RDSScheduleArn
      Architectures:
        - x86_64
      Runtime: python3.9
      Timeout: 20
      MemorySize: 256
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              import boto3
              client = boto3.client('rds')
              response = client.describe_db_instances(DBInstanceIdentifier=event['rds_instance_id'])
              current_state = response['DBInstances'][0]['DBInstanceStatus']
              print(f"db instance current status: {current_state}")
              if event['rds_required_state'] == "available":
                  if current_state == "stopped":
                      print(f"Starting DB instance: {event['rds_instance_id']}")
                      response = client.start_db_instance(DBInstanceIdentifier=event['rds_instance_id'])
                      print(response)
              elif event["rds_required_state"] == "stopped":
                  if current_state == "available":
                      print(f"Stopping DB instance: {event['rds_instance_id']}")
                      response = client.stop_db_instance(DBInstanceIdentifier=event['rds_instance_id'])
                      print(response)
  EventBridgeIAMrole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess"